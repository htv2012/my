#!/usr/bin/env python3
"""
Toggles dev mode for a number of projects
"""
import argparse
import logging
import os
import pathlib


WORKSPACE = os.path.expandvars("/syzygy/development/$USER/syzygy-workspace")
WORKSPACE = pathlib.Path(WORKSPACE)
PROJECT_TRANSLATION = {
    "cc": "confd-client",
    "confd": "confd-client",
    "sc": "syzygy-common",
    "sct": "syzygy-common-test",
}

logging.basicConfig(level=logging.WARN)
LOGGER = logging.getLogger("devmode")


def translate_alias(alias: str) -> str:
    return PROJECT_TRANSLATION.get(alias, alias)


def toggle_devmode(project: str):
    dev_table = {
        "confd-client": WORKSPACE / "confd-client/src/confd",
        "syzygy-common": WORKSPACE / "syzygy-common/src/syzygy_common",
        "syzygy-common-test": WORKSPACE / "syzygy-common-test/src/syzygy_common_test",
    }
    if project not in dev_table:
        raise SystemExit(f"Project {project} not found")
    dev_path = dev_table[project]
    dev_dir = dev_path.name
    LOGGER.debug("dev_path=%s", dev_path)
    LOGGER.debug("dev_dir=%s", dev_dir)

    site_packages = next(pathlib.Path("test-env/lib").glob("python*/site-packages"), None)
    LOGGER.debug("site-packages dir=%s", site_packages)
    if site_packages is None:
        raise SystemExit("Cannot find site-packages")

    dest = site_packages / dev_dir
    LOGGER.debug("dest=%s", dest)

    original = dest.with_name(f"{dev_dir}.original")
    if dest.is_symlink():
        # We are currently in dev mode, switch it off
        print(f"Switching off dev mode: {project}")
        dest.unlink()
        original.rename(dest)
    else:
        # We are not in dev mode, switch it on
        print(f"Switching on dev mode: {project}")
        dest.rename(original)
        print(dest)
        dest.symlink_to(dev_path)


def main():
    """ Entry """
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", default=False, action="store_true")
    parser.add_argument("projects", nargs="+", type=translate_alias, choices=PROJECT_TRANSLATION.values())
    options = parser.parse_args()

    if options.verbose:
        LOGGER.setLevel(logging.DEBUG)

    for project in options.projects:
        toggle_devmode(project)


if __name__ == '__main__':
    main()
