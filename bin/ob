#!/usr/bin/env python3
import argparse
import atexit
import contextlib
import json
import pathlib
import urllib.error
import urllib.request
import webbrowser


class Config:
    DEFAULT = {
        "templates": [
            "https://docs.python.org/3/library/%s.html",
            "https://www.man7.org/linux/man-pages/man1/%s.1.html",
        ],
        "bookmarks": {},
    }

    def __init__(self):
        self.config_path = pathlib.Path("~/.config/ob.json").expanduser()
        self.create_if_needed()
        with open(self.config_path, "r", encoding="utf-8") as stream:
            self.config = json.load(stream)
        atexit.register(self.save)

    def create_if_needed(self):
        """Create a new config file."""
        if self.config_path.exists():
            return

        source = pathlib.Path("~/my/dotfiles/.config/ob.json").expanduser()
        if source.exists():
            self.config_path.symlink_to(source)
        else:
            self.config = self.DEFAULT
            self.save()

    def save(self):
        with open(self.config_path, "w", encoding="utf-8") as stream:
            json.dump(self.config, stream, indent=4, sort_keys=True)

    def lookup(self, query: str) -> str:
        for template in self.config["templates"]:
            url = template % (query,)
            with contextlib.suppress(urllib.error.URLError):
                urllib.request.urlopen(url)
                return url

        return None


def main():
    """Entry"""
    parser = argparse.ArgumentParser(description="Open in Browser--A web look-up")
    parser.add_argument("query")
    options = parser.parse_args()
    config = Config()

    url = config.lookup(options.query)


    if url is None:
        raise SystemExit(f"Not found: {options.query}")

    browser = webbrowser.get(using='firefox')
    if browser is None:
        browser = webbrowser.get()
    browser.open(url)


if __name__ == "__main__":
    main()
