#!/usr/bin/env python3
import ast
import argparse
import pathlib


def find_package(path_to_python_module):
    dirs = []
    path = path_to_python_module.parent
    while (path / "__init__.py").exists():
        dirs.append(path.name)
        path = path.parent
    package = ".".join(reversed(dirs))
    # print(f">>> {path_to_python_module} -> {package!r}")
    return package


def get_name(node):
    if isinstance(node, ast.Name):
        return node.id
    elif isinstance(node, ast.Attribute):
        name = get_name(node.value)
        return f"{name}.{node.attr}"
    raise TypeError(f"Unrecognized type: {node}")


class ModuleVisitor(ast.NodeVisitor):
    def __init__(self, mod, path):
        self.mod = mod
        self.path = path
        self.level = 1

        package = find_package(path)
        if path.name != "__init__.py":
            package = f"{package}.{path.stem}"
        self.package = package.replace("-", "_")

    def indent(self):
        print("    " * self.level, end="")

    def visit_ClassDef(self, node):
        # self.indent()
        # print(f"class {node.name}", end="")
        class_name = f"{self.package}.{node.name}".strip(".")
        print(f"\n' class {class_name}")
        print(class_name)
        bases = [get_name(n) for n in node.bases]
        for base in bases:
            print(f"{base} <|-- {class_name}")

        # # Visit methods
        self.level += 1
        self.generic_visit(node)
        self.level -= 1

    def visit_FunctionDef(self, node: ast.FunctionDef):
        """Visits a function.

        See:
        https://greentreesnakes.readthedocs.io/en/latest/nodes.html?highlight=functiondef#FunctionDef
        https://greentreesnakes.readthedocs.io/en/latest/nodes.html?highlight=functiondef#arguments

        Attributes: name, args, body, decorator_list, return, type_comment
        args: arguments with attributes: args, posonlyargs, kwonlyargs, vararg, kwarg
        """
        if node.name.startswith("_") and node.name != "__init__":
            return
        # self.indent()
        # print(f"def {node.name}({ast.unparse(node.args)})")

        # How do I do
        #   class : func
        # for class, and
        #   mod : func
        # for free functions


def main():
    """ Entry """
    parser = argparse.ArgumentParser()
    parser.add_argument("dest", type=pathlib.Path, nargs="+")
    options = parser.parse_args()

    print("@startuml")

    for root in options.dest:
        root = root.resolve()

        for path_to_python_module in root.glob("**/*.py"):
            contents = path_to_python_module.read_text()
            if not contents:
                continue
            mod = ast.parse(contents, filename=str(path_to_python_module))
            # show_module(mod, path_to_python_module)
            visitor = ModuleVisitor(mod, path_to_python_module)
            visitor.visit(mod)

    print("@enduml")


if __name__ == '__main__':
    main()

